spring:
  application:
    name: notification-service
  config:
    import: optional:file:.env[properties]
  datasource:
    url: jdbc:postgresql://localhost:5432/${DB_NAME}
    username: ${DB_USER}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver

  jpa:
    database: postgresql
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    hibernate:
      ddl-auto: create
    show-sql: true
    defer-datasource-initialization: true
  sql:
    init:
      mode: always

  kafka:
    bootstrap-servers: tweaty-kafka:9092 # Kafka 브로커 서버 주소
    consumer:
      group-id: notification-group     # Consumer Group ID
      auto-offset-reset: earliest      # 시작 오프셋 설정 (earliest: 처음부터, latest: 최신부터)
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    listener:
      missing-topics-fatal: false      # 토픽이 없어도 애플리케이션이 종료되지 않도록 설정
      ack-mode: record                 # Consumer가 메시지를 처리한 후 명시적으로 확인(Acknowledgement)

eureka:
  client:
    service-url:
      defaultZone: http://localhost:19090/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance:
    hostname: localhost

server:
  port: 19100

